/**
 * Remove the tabs from Woocommerce
 */
function woo_remove_product_tabs( $tabs ) {
	unset( $tabs['description'] ); // Remove the description tab
	unset( $tabs['reviews'] ); // Remove the reviews tab
	unset( $tabs['additional_information'] ); // Remove the additional information tab
	return $tabs;
}
add_filter( 'woocommerce_product_tabs', 'woo_remove_product_tabs', 98 );
  
/**
 * Remove cart
 */
function remove_woocommerce_add_to_cart_button() {
	remove_action( 'woocommerce_after_shop_loop_item', 'woocommerce_template_loop_add_to_cart', 10 );
	remove_action( 'woocommerce_single_product_summary', 'woocommerce_template_single_add_to_cart', 30 );
	remove_action( 'woocommerce_simple_add_to_cart', 'woocommerce_simple_add_to_cart', 30 );
	remove_action( 'woocommerce_grouped_add_to_cart', 'woocommerce_grouped_add_to_cart', 30 );
	remove_action( 'woocommerce_variable_add_to_cart', 'woocommerce_variable_add_to_cart', 30 );
	remove_action( 'woocommerce_external_add_to_cart', 'woocommerce_external_add_to_cart', 30 );
	remove_action( 'woocommerce_single_variation', 'woocommerce_single_variation', 10 );
	remove_action( 'woocommerce_single_variation', 'woocommerce_single_variation_add_to_cart_button', 20 );
}
add_action( 'init', 'remove_woocommerce_add_to_cart_button' );
  
/**
 * Get price
 */ 
$product->get_price_html();
$product->get_regular_price();
$product->get_sale_price();
$product->get_price();
  /* With loop */
  <?php
    global $woocommerce;
    $currency = get_woocommerce_currency_symbol();
    $price = get_post_meta( get_the_ID(), '_regular_price', true);
    $sale = get_post_meta( get_the_ID(), '_sale_price', true);
  ?>
  <?php if($sale) : ?>
    <p class="product-price-tickr"><del><?php echo $currency; echo $price; ?></del> <?php echo $currency; echo $sale; ?></p>    
  <?php elseif($price) : ?>
    <p class="product-price-tickr"><?php echo $currency; echo $price; ?></p>    
  <?php endif; ?>
  /* Prefix price */
  function bbloomer_price_translatable_suffix( $html, $product, $price, $qty ){
	$html .=  __( '<span class="mh-price-prefix">Giá: </span>', 'flatsome' );
	return $html;
  }
  add_filter( 'woocommerce_get_price_suffix', 'bbloomer_price_translatable_suffix', 99, 4 );

/**
 * Quantity
 */
  /* Before */
  function mh_qty_front_add_cart() {
  	printf( '<span class="mh-before-quantity">Số lượng: </span>', 'flatsome' );
  }
  add_action( 'woocommerce_before_add_to_cart_quantity', 'mh_qty_front_add_cart' );
 	
  
/**
 * SKU
 */  
 $product->get_sku();
 
/**
 * ID
 */
 $product->get_id();

/**
 * Get category name product
 */
global $post;
$terms = get_the_terms( $post->ID, 'product_cat' );
foreach ($terms as $term) {
    echo $product_cat_id = $term->name;
    break;
}

/**
 * Custom checkout field Woocommerce
 */
function custom_remove_woo_checkout_fields( $fields ) {
	// remove billing fields
	unset($fields['billing']['billing_first_name']);
	unset($fields['billing']['billing_last_name']);
	unset($fields['billing']['billing_company']);
	unset($fields['billing']['billing_address_1']);
	unset($fields['billing']['billing_address_2']);
	unset($fields['billing']['billing_city']);
	unset($fields['billing']['billing_postcode']);
	unset($fields['billing']['billing_country']);
	unset($fields['billing']['billing_state']);
	unset($fields['billing']['billing_phone']);
	unset($fields['billing']['billing_email']);

	// remove shipping fields 
	unset($fields['shipping']['shipping_first_name']);    
	unset($fields['shipping']['shipping_last_name']);  
	unset($fields['shipping']['shipping_company']);
	unset($fields['shipping']['shipping_address_1']);
	unset($fields['shipping']['shipping_address_2']);
	unset($fields['shipping']['shipping_city']);
	unset($fields['shipping']['shipping_postcode']);
	unset($fields['shipping']['shipping_country']);
	unset($fields['shipping']['shipping_state']);

	// remove order comment fields
	unset($fields['order']['order_comments']);

	return $fields;
}
add_filter( 'woocommerce_checkout_fields' , 'custom_remove_woo_checkout_fields' );

function override_billing_checkout_fields( $fields ) {
	$fields['billing']['billing_phone']['placeholder'] = 'Telefon';
	$fields['billing']['billing_phone']['placeholder'] = 'Email';
	return $fields;
}
add_filter( 'woocommerce_checkout_fields' , 'override_billing_checkout_fields', 20, 1 );
  
/**
 * Add a custom product data tab
 */
function woo_new_product_tab( $tabs ) {
	$tabs['test_tab'] = array(
	'title' 	=> __( 'New Product Tab', 'woocommerce' ),
	'priority' 	=> 50,
	'callback' 	=> 'woo_new_product_tab_content'
);
return $tabs;
}
add_filter( 'woocommerce_product_tabs', 'woo_new_product_tab' );
function woo_new_product_tab_content() {
	echo '<h2>New Product Tab</h2>';
	echo '<p>Here\'s your new product tab.</p>';
}

/**
 * Change symbol VND
 */
function change_existing_currency_symbol( $currency_symbol, $currency ) {
	switch( $currency ) {
		case 'VND': $currency_symbol = 'VNĐ'; break;
	}
	return $currency_symbol;
}
add_filter('woocommerce_currency_symbol', 'change_existing_currency_symbol', 10, 2);

/**
 * Custom taxonomy product
 */
add_action( 'init', 'custom_taxonomy_Item' );
function custom_taxonomy_Item()  {
$labels = array(
    'name'                       => 'Items',
    'singular_name'              => 'Item',
    'menu_name'                  => 'Item',
    'all_items'                  => 'All Items',
    'parent_item'                => 'Parent Item',
    'parent_item_colon'          => 'Parent Item:',
    'new_item_name'              => 'New Item Name',
    'add_new_item'               => 'Add New Item',
    'edit_item'                  => 'Edit Item',
    'update_item'                => 'Update Item',
    'separate_items_with_commas' => 'Separate Item with commas',
    'search_items'               => 'Search Items',
    'add_or_remove_items'        => 'Add or remove Items',
    'choose_from_most_used'      => 'Choose from the most used Items',
);
$args = array(
    'labels'                     => $labels,
    'hierarchical'               => true,
    'public'                     => true,
    'show_ui'                    => true,
    'show_admin_column'          => true,
    'show_in_nav_menus'          => true,
    'show_tagcloud'              => true,
);
register_taxonomy( 'item', 'product', $args );
register_taxonomy_for_object_type( 'item', 'product' );
}

/* Get Taxonomy custom */
$taxonomy_slug = "brands";
  $terms = get_the_terms( $id, $taxonomy_slug );
  if ( !empty( $terms ) ) {
    foreach ( $terms as $term ) {
      $out[] = '<a href="'. get_term_link( $term->slug, $taxonomy_slug ) .'">'. $term->name. "</a>";
    }
    echo implode(', ', $out );
  }
  
/*
 * Custom prefix and sufix to price
 */
/* Custom prefix and sufix to price */
function bbloomer_price_prefix_suffix( $price, $product ) {
  $text_price = __( 'Giá gốc:', 'flatsome' );
  $text_sales = __( 'Giá bán:', 'flatsome' );
  if ( $product->is_on_sale() ) {
      $price = $text_price.' <span>'.$price.'</span>	';
      return apply_filters( 'woocommerce_get_price', $price );
    } else {
      $price = $text_sales.' <span>'.$price.'</span>	';
      return apply_filters( 'woocommerce_get_price', $price );
  }
}
add_filter( 'woocommerce_get_price_html', 'bbloomer_price_prefix_suffix', 100, 2 );

function bd_sale_price_html( $price, $product ) {
	$text_sales = __( 'Giá bán', 'flatsome' );
  if ( $product->is_on_sale() ) :
    $return_string = str_replace( '<ins>', '<ins><br />'.$text_sales.': ', $price);
    return $return_string;
  else :
    return $price;
  endif;
}
add_filter( 'woocommerce_get_price_html', 'bd_sale_price_html', 100, 2 );

/* Contact price */
function mh_custom_call_for_price() {
	$text_contact = __( 'Liên hệ', 'flatsome' );
	return '<span class="cfps">'.$text_contact.'</span>';
}
add_filter( 'woocommerce_empty_price_html', 'mh_custom_call_for_price' );

/*
 * Custom prefix and sufix to quantity
 */
function bbloomer_echo_qty_front_add_cart() { ?>
	<div class="mh-quantity"><?php _e('Số lượng:', 'flatsome') ?></div>
<?php }
add_action( 'woocommerce_before_add_to_cart_quantity', 'bbloomer_echo_qty_front_add_cart' );

/**
 * Quick checkout
 */
function add_content_after_addtocart() {

    // get the current post/product ID
    $current_product_id = get_the_ID();

    // get the product based on the ID
    $product = wc_get_product( $current_product_id );

    // get the "Checkout Page" URL
    $checkout_url = WC()->cart->get_checkout_url();

    // run only on simple products
    if( $product->is_type( 'simple' ) ){
        echo '<a href="'.$checkout_url.'?add-to-cart='.$current_product_id.'" class="single_add_to_cart_button button alt">Checkout</a>';
    }
}
add_action( 'woocommerce_after_add_to_cart_button', 'add_content_after_addtocart' );

/**
 * Custom field
 */
function woocommerce_product_custom_fields() {
	 $args_time = array(
		 'id' => 'mh_time_start',
		 'label' => __('Thời gian', 'flatsome'),
	 );
	 woocommerce_wp_text_input($args_time);

	 $args_location = array(
		 'id' => 'mh_location',
		 'label' => __('Địa điểm', 'flatsome'),
	 );
	 woocommerce_wp_text_input($args_location);
}
add_action('woocommerce_product_options_general_product_data', 'woocommerce_product_custom_fields');

function save_woocommerce_product_custom_fields($post_id) {
  $product = wc_get_product($post_id);

  $custom_time = isset($_POST['mh_time_start']) ? $_POST['mh_time_start'] : '';
  $product->update_meta_data('mh_time_start', sanitize_text_field($custom_time));

	$custom_location = isset($_POST['mh_location']) ? $_POST['mh_location'] : '';
  $product->update_meta_data('mh_location', sanitize_text_field($custom_location));

  $product->save();
}
add_action('woocommerce_process_product_meta', 'save_woocommerce_product_custom_fields');

function mh_get_tour() {
  global $post;
  $product = wc_get_product($post->ID);

	$custom_time_start = $product->get_meta('mh_time_start');
	$custom_location = $product->get_meta('mh_location');

	if ($custom_time_start) {
		printf( '<p class="mh-field-action"><i class="fas fa-map-marker-alt"></i> Thời gian: '.esc_html($custom_time_start).'</p>', 'flatsome' );
  }
	if ($custom_location) {
		printf( '<p class="mh-field-action"><i class="far fa-clock"></i> Địa điểm: '.esc_html($custom_location).'</p>', 'flatsome' );
  }
}
add_action( 'woocommerce_single_product_summary', 'mh_get_tour', 20 );
add_action( 'flatsome_product_box_after', 'mh_get_tour' );

/**
 * Query list product
 */
$orderby = 'name';
$order = 'asc';
$cat_args = array(
	'orderby'    => $orderby,
	'order'      => $order,
	'hide_empty' => true
);

$product_categories = get_terms( 'product_cat', $cat_args );

if( !empty($product_categories) ){
	foreach ($product_categories as $key => $category) {
		echo '<option>'.$category->name.'</option>';
	}
}
